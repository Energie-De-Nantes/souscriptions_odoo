#!/usr/bin/env python3
"""
Test complet du portal avec authentification
"""
import requests
import sys
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

def test_portal_with_auth():
    """Test l'acc√®s au portal avec authentification"""
    base_url = "http://localhost:8071"
    
    # Configuration de session avec retry
    session = requests.Session()
    retry_strategy = Retry(
        total=3,
        status_forcelist=[429, 500, 502, 503, 504],
        backoff_factor=1
    )
    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    
    print("üîç Test complet du portal avec authentification admin")
    
    try:
        # 1. Acc√©der √† la page de login
        print("\nüìã √âtape 1: Acc√®s √† la page de login")
        login_response = session.get(f"{base_url}/web/login")
        if login_response.status_code != 200:
            print(f"‚ùå Page de login non accessible: {login_response.status_code}")
            return False
        print("‚úÖ Page de login accessible")
        
        # 2. Tenter authentification (simple test de formulaire)
        print("\nüìã √âtape 2: Test de formulaire d'authentification")
        if 'csrf_token' in login_response.text or 'name="login"' in login_response.text:
            print("‚úÖ Formulaire de login pr√©sent")
        else:
            print("‚ö†Ô∏è  Formulaire de login non d√©tect√©, mais page accessible")
            
        # 3. Test direct de l'API REST pour v√©rifier que le serveur fonctionne
        print("\nüìã √âtape 3: Test de l'API Odoo")
        try:
            api_response = session.get(f"{base_url}/web/webclient/version_info", timeout=5)
            if api_response.status_code == 200:
                print("‚úÖ API Odoo r√©pond correctement")
            else:
                print(f"‚ö†Ô∏è  API Odoo r√©pond avec le code: {api_response.status_code}")
        except Exception as e:
            print(f"‚ö†Ô∏è  API Odoo non accessible: {str(e)[:50]}...")
            
        # 4. Test d'acc√®s au portal (doit rediriger vers login)
        print("\nüìã √âtape 4: Test d'acc√®s au portal")
        portal_response = session.get(f"{base_url}/my/souscriptions", allow_redirects=False)
        if portal_response.status_code in [302, 303]:
            print("‚úÖ Portal redirige correctement vers l'authentification")
            
            # V√©rifier que la redirection va vers login
            location = portal_response.headers.get('location', '')
            if 'login' in location or 'web' in location:
                print("‚úÖ Redirection vers page d'authentification")
            else:
                print(f"‚ö†Ô∏è  Redirection vers: {location}")
        else:
            print(f"‚ùå R√©ponse inattendue du portal: {portal_response.status_code}")
            return False
            
        print("\nüéâ Portal correctement configur√© !")
        print("\nPour tester manuellement:")
        print(f"1. Ouvrez {base_url}/web dans votre navigateur")
        print("2. Connectez-vous avec: admin / admin")
        print(f"3. Acc√©dez au portal: {base_url}/my/souscriptions")
        print("4. Vous devriez voir vos souscriptions √©lectriques")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur Odoo non accessible. V√©rifiez qu'il est d√©marr√©.")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        return False

if __name__ == "__main__":
    if test_portal_with_auth():
        print("\n‚úÖ Tous les tests passent. Le portal est pr√™t √† √™tre utilis√©.")
        sys.exit(0)
    else:
        print("\n‚ùå Certains tests ont √©chou√©.")
        sys.exit(1)