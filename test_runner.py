#!/usr/bin/env python3
"""
Test runner simplifi√© pour le module souscriptions.
Utilise les standards Python unittest et les commandes Odoo officielles.
"""

import sys
import subprocess
import argparse
from pathlib import Path


class OdooTestRunner:
    """Runner de tests simplifi√© pour Odoo utilisant les standards Python."""
    
    def __init__(self):
        self.odoo_cmd = "odoo"
        self.addons_path = "/home/virgile/addons_odoo"
        self.default_db = "souscriptions_test"
        
        # Mapping des tags selon les standards Odoo
        self.test_tags = {
            'all': 'souscriptions',
            'basic': 'souscriptions_basic',
            'facturation': 'souscriptions_facturation', 
            'template': 'souscriptions_template',
            'workflow': 'souscriptions_workflow',
            'ui': 'souscriptions_ui',
            'reports': 'souscriptions_reports',
        }
    
    def build_command(self, test_type='all', db_name=None, verbose=False, install=False):
        """Construit la commande Odoo selon les standards officiels."""
        db = db_name or self.default_db
        tag = self.test_tags.get(test_type, 'souscriptions')
        
        cmd = [
            self.odoo_cmd,
            '-d', db,
            '--test-enable',
            '--test-tags', tag,
            '--stop-after-init',
            '--addons-path', self.addons_path
        ]
        
        if install:
            cmd.extend(['-i', 'souscriptions'])
        
        if verbose:
            cmd.extend(['--log-level', 'info'])
            
        return cmd
    
    def run_tests(self, test_type='all', db_name=None, verbose=False, install=False):
        """Lance les tests avec la commande Odoo standard."""
        cmd = self.build_command(test_type, db_name, verbose, install)
        
        print(f"üß™ Lancement des tests {test_type}")
        print(f"üìä Base de donn√©es: {db_name or self.default_db}")
        print(f"üè∑Ô∏è  Tag: {self.test_tags.get(test_type, 'souscriptions')}")
        print(f"üíª Commande: {' '.join(cmd)}")
        print("-" * 50)
        
        try:
            result = subprocess.run(cmd, check=False)
            
            if result.returncode == 0:
                print("‚úÖ Tests r√©ussis!")
                return True
            else:
                print("‚ùå Certains tests ont √©chou√©")
                return False
                
        except FileNotFoundError:
            print(f"‚ùå Erreur: {self.odoo_cmd} non trouv√© dans le PATH")
            print("üí° V√©rifiez votre installation Odoo")
            return False
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Tests interrompus par l'utilisateur")
            return False
    
    def discover_tests(self):
        """Utilise unittest discovery pour lister les tests disponibles."""
        print("üîç D√©couverte des tests avec unittest...")
        
        test_dir = Path(__file__).parent / "tests"
        
        try:
            # Utilise unittest discovery standard
            cmd = [
                sys.executable, '-m', 'unittest', 'discover',
                '-s', str(test_dir),
                '-p', 'test_*.py',
                '-v'
            ]
            
            print(f"Commande: {' '.join(cmd)}")
            subprocess.run(cmd, check=True)
            
        except subprocess.CalledProcessError:
            print("‚ùå Erreur lors de la d√©couverte des tests")
        except FileNotFoundError:
            print("‚ùå Tests directory non trouv√©")
    
    def list_available_tags(self):
        """Liste les tags de test disponibles."""
        print("üè∑Ô∏è Tags de test disponibles:")
        for name, tag in self.test_tags.items():
            print(f"  {name:12} -> {tag}")
    
    def quick_test(self, test_type='basic'):
        """Lance des tests rapides pour d√©veloppement."""
        print(f"‚ö° Tests rapides: {test_type}")
        return self.run_tests(test_type, verbose=False, install=False)


def main():
    """Point d'entr√©e principal avec CLI simple."""
    parser = argparse.ArgumentParser(
        description="Test runner pour le module Odoo souscriptions",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python test_runner.py                    # Tous les tests
  python test_runner.py basic              # Tests basiques
  python test_runner.py template --verbose # Tests template avec logs
  python test_runner.py --install          # Avec installation du module
  python test_runner.py --discover         # D√©couverte unittest
  python test_runner.py --list-tags        # Liste des tags
        """
    )
    
    parser.add_argument(
        'test_type', 
        nargs='?', 
        default='all',
        choices=['all', 'basic', 'facturation', 'template', 'workflow', 'ui', 'reports'],
        help='Type de test √† lancer (d√©faut: all)'
    )
    
    parser.add_argument(
        '--db', 
        default=None,
        help='Nom de la base de donn√©es (d√©faut: souscriptions_test)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Mode verbeux avec logs d√©taill√©s'
    )
    
    parser.add_argument(
        '--install',
        action='store_true', 
        help='Installer le module avant les tests'
    )
    
    parser.add_argument(
        '--discover',
        action='store_true',
        help='Utiliser unittest discover pour lister les tests'
    )
    
    parser.add_argument(
        '--list-tags',
        action='store_true',
        help='Lister les tags de test disponibles'
    )
    
    parser.add_argument(
        '--quick',
        action='store_true',
        help='Tests rapides (√©quivalent √† basic sans install)'
    )
    
    args = parser.parse_args()
    
    runner = OdooTestRunner()
    
    # Actions sp√©ciales
    if args.list_tags:
        runner.list_available_tags()
        return
        
    if args.discover:
        runner.discover_tests()
        return
        
    if args.quick:
        success = runner.quick_test(args.test_type)
    else:
        success = runner.run_tests(
            test_type=args.test_type,
            db_name=args.db,
            verbose=args.verbose,
            install=args.install
        )
    
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()